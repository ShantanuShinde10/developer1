name: "Security Analysis: SonarCloud, CodeQL, Dependabot & Secret Scanning"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 6 * * *'  # Runs daily at 6 AM UTC
  workflow_dispatch:

permissions:
  security-events: write
  issues: write
  contents: read

jobs:
  security-analysis:
    name: "SonarCloud, CodeQL & Issue Creation"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      # ðŸ”¹ SonarCloud Scan
      - name: "Run SonarCloud Scan"
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=ShantanuShinde10_sonarscan
            -Dsonar.organization=shantanushinde10
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io

      # ðŸ”¹ CodeQL Analysis
      - name: "Initialize CodeQL"
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,python

      - name: "Run CodeQL Analysis"
        uses: github/codeql-action/analyze@v3

      # ðŸ”¹ Fetch SonarCloud Alerts & Create Issues
      - name: "Create GitHub Issues for SonarCloud Alerts"
        if: success()
        run: |
          ALERTS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/issues/search?componentKeys=ShantanuShinde10_sonarscan&resolved=false")

          ALERT_COUNT=$(echo "$ALERTS" | jq '.total')

          if [ "$ALERT_COUNT" -gt 0 ]; then
            echo "SonarCloud alerts found. Creating issues..."

            echo "$ALERTS" | jq -c '.issues[]' | while read -r alert; do
              RULE_NAME=$(echo "$alert" | jq -r '.rule')
              ISSUE_MESSAGE=$(echo "$alert" | jq -r '.message')
              ALERT_URL="https://sonarcloud.io/project/issues?id=ShantanuShinde10_sonarscan&open=$(echo "$alert" | jq -r '.key')"

              ISSUE_TITLE="Fix SonarCloud Alert - $RULE_NAME"
              ISSUE_BODY="### Security Alert ðŸš¨\n- **Rule**: $RULE_NAME\n- **Issue**: $ISSUE_MESSAGE\n- **View Alert**: [Click here]($ALERT_URL)"

              curl -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
                -d "{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_BODY\", \"labels\":[\"security\"]}" \
                "https://api.github.com/repos/${{ github.repository }}/issues"
            done
          else
            echo "No security issues found in SonarCloud."
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      # ðŸ”¹ Fetch CodeQL Alerts & Create Issues
      - name: "Create GitHub Issues for CodeQL Alerts"
        if: success()
        run: |
          ALERTS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts?state=open")

          ALERT_COUNT=$(echo "$ALERTS" | jq 'length')

          if [ "$ALERT_COUNT" -gt 0 ]; then
            echo "CodeQL alerts found. Creating issues..."

            echo "$ALERTS" | jq -c '.[]' | while read -r alert; do
              RULE_NAME=$(echo "$alert" | jq -r '.rule.name')
              ALERT_URL=$(echo "$alert" | jq -r '.html_url')

              ISSUE_TITLE="Fix CodeQL Alert - $RULE_NAME"
              ISSUE_BODY="### Security Alert ðŸš¨\n- **Rule**: $RULE_NAME\n- **View Alert**: [Click here]($ALERT_URL)"

              curl -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
                -d "{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_BODY\", \"labels\":[\"security\"]}" \
                "https://api.github.com/repos/${{ github.repository }}/issues"
            done
          else
            echo "No security issues found in CodeQL."
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

  dependabot-alerts:
    name: "Check Dependabot Alerts & Create Issues"
    runs-on: ubuntu-latest

    steps:
      - name: "Check for Dependabot Alerts"
        run: |
          ALERTS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/vulnerability-alerts")

          if [ -z "$ALERTS" ] || [ "$ALERTS" == "[]" ]; then
            echo "No Dependabot alerts found."
            exit 0
          fi

          echo "Dependabot alerts found. Creating issues..."
          echo "$ALERTS" | jq -c '.[]' | while read -r alert; do
            PACKAGE_NAME=$(echo "$alert" | jq -r '.security_advisory.affected_package_name')
            SEVERITY=$(echo "$alert" | jq -r '.security_advisory.severity')
            SUMMARY=$(echo "$alert" | jq -r '.security_advisory.summary')
            ALERT_URL=$(echo "$alert" | jq -r '.html_url')

            ISSUE_TITLE="Fix Dependabot Alert - $PACKAGE_NAME ($SEVERITY)"
            ISSUE_BODY="### Security Alert ðŸš¨\n- **Package**: $PACKAGE_NAME\n- **Severity**: $SEVERITY\n- **Summary**: $SUMMARY\n- **View Alert**: [Click here]($ALERT_URL)"

            curl -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
              -d "{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_BODY\", \"labels\":[\"security\"]}" \
              "https://api.github.com/repos/${{ github.repository }}/issues"
          done
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

  secret-scanning:
    name: "Run Secret Scanning"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Scan for Secrets with Gitleaks"
        run: |
          docker run --rm -v $(pwd):/repo zricethezav/gitleaks detect -s /repo -r gitleaks-report.json || true

      - name: "Check for Detected Secrets"
        run: |
          if [ -s gitleaks-report.json ]; then
            echo "Secrets detected! Creating GitHub issues..."
            cat gitleaks-report.json | jq -c '.[]' | while read -r alert; do
              SECRET_DESC=$(echo "$alert" | jq -r '.Description')
              SECRET_FILE=$(echo "$alert" | jq -r '.File')
              LINE_NUM=$(echo "$alert" | jq -r '.Line')

              ISSUE_TITLE="ðŸ”’ Secret Detected in $SECRET_FILE"
              ISSUE_BODY="### Secret Exposure Alert ðŸš¨\n- **File**: $SECRET_FILE\n- **Line**: $LINE_NUM\n- **Description**: $SECRET_DESC\n- **Action Required**: Remove or rotate this secret."

              curl -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
                -d "{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_BODY\", \"labels\":[\"security\", \"secrets\"]}" \
                "https://api.github.com/repos/${{ github.repository }}/issues"
            done
          else
            echo "No secrets found."
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
