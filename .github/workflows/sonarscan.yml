name: "Security Analysis: SonarCloud, CodeQL & Trivy + Issue Creation"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 6 * * *'  # Runs daily at 6 AM UTC
  workflow_dispatch:

permissions:
  security-events: write
  issues: write

jobs:
  security-analysis:
    name: "SonarCloud, CodeQL, Trivy & Issue Creation"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      # üîπ SonarCloud Scan
      - name: "Run SonarCloud Scan"
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=ShantanuShinde10_sonarscan
            -Dsonar.organization=shantanushinde10
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io

      # üîπ CodeQL Analysis
      - name: "Initialize CodeQL"
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,python

      - name: "Run CodeQL Analysis"
        uses: github/codeql-action/analyze@v3

      # üîπ Trivy Scan (Filesystem & Dependencies)
      - name: "Run Trivy Scan"
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "json"
          output: "trivy-results.json"
          severity: "CRITICAL,HIGH"

      - name: "Upload Trivy Scan Results"
        uses: actions/upload-artifact@v3
        with:
          name: "trivy-results"
          path: "trivy-results.json"

      # üîπ Fetch SonarCloud Alerts & Create Issues
      - name: "Create GitHub Issues for SonarCloud Alerts"
        if: success()
        run: |
          ALERTS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/issues/search?componentKeys=ShantanuShinde10_sonarscan&resolved=false")

          ALERT_COUNT=$(echo "$ALERTS" | jq '.total')

          if [ "$ALERT_COUNT" -gt 0 ]; then
            echo "Creating issues for SonarCloud alerts..."

            echo "$ALERTS" | jq -c '.issues[]' | while read -r alert; do
              RULE_NAME=$(echo "$alert" | jq -r '.rule')
              ISSUE_MESSAGE=$(echo "$alert" | jq -r '.message')
              ALERT_URL="https://sonarcloud.io/project/issues?id=ShantanuShinde10_sonarscan&open=$(echo "$alert" | jq -r '.key')"

              ISSUE_TITLE="‚ö†Ô∏è Fix SonarCloud Alert - $RULE_NAME"
              ISSUE_BODY="### Security Alert üö®\n- **Rule**: $RULE_NAME\n- **Issue**: $ISSUE_MESSAGE\n- **View Alert**: [Click here]($ALERT_URL)"

              curl -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
                -d "{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_BODY\", \"labels\":[\"security\"]}" \
                "https://api.github.com/repos/${{ github.repository }}/issues"
            done
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      # üîπ Fetch CodeQL Alerts & Create Issues
      - name: "Create GitHub Issues for CodeQL Alerts"
        if: success()
        run: |
          ALERTS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts?state=open")

          ALERT_COUNT=$(echo "$ALERTS" | jq 'length')

          if [ "$ALERT_COUNT" -gt 0 ]; then
            echo "Creating issues for CodeQL alerts..."

            echo "$ALERTS" | jq -c '.[]' | while read -r alert; do
              RULE_NAME=$(echo "$alert" | jq -r '.rule.name')
              ALERT_URL=$(echo "$alert" | jq -r '.html_url')

              ISSUE_TITLE="‚ö†Ô∏è Fix CodeQL Alert - $RULE_NAME"
              ISSUE_BODY="### Security Alert üö®\n- **Rule**: $RULE_NAME\n- **View Alert**: [Click here]($ALERT_URL)"

              curl -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
                -d "{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_BODY\", \"labels\":[\"security\"]}" \
                "https://api.github.com/repos/${{ github.repository }}/issues"
            done
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      # üîπ Fetch Trivy Alerts & Create Issues
      - name: "Create GitHub Issues for Trivy Alerts"
        run: |
          TRIVY_RESULTS=$(cat trivy-results.json)
          ALERT_COUNT=$(echo "$TRIVY_RESULTS" | jq '.Results | length')

          if [ "$ALERT_COUNT" -gt 0 ]; then
            echo "Creating issues for Trivy alerts..."

            echo "$TRIVY_RESULTS" | jq -c '.Results[].Vulnerabilities[]' | while read -r vuln; do
              PACKAGE=$(echo "$vuln" | jq -r '.PkgName')
              SEVERITY=$(echo "$vuln" | jq -r '.Severity')
              CVE=$(echo "$vuln" | jq -r '.VulnerabilityID')
              URL=$(echo "$vuln" | jq -r '.PrimaryURL')

              ISSUE_TITLE="üî¥ Trivy Security Alert: $PACKAGE ($SEVERITY)"
              ISSUE_BODY="### Security Alert üö®\n- **Package**: $PACKAGE\n- **Severity**: $SEVERITY\n- **CVE**: $CVE\n- **More Details**: [Trivy Report]($URL)"

              curl -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
                -d "{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_BODY\", \"labels\":[\"security\"]}" \
                "https://api.github.com/repos/${{ github.repository }}/issues"
            done
          fi
