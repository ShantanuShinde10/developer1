name: "Security Analysis: SonarCloud, CodeQL, Trivy + Issue Creation"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 6 * * *'  # Runs daily at 6 AM UTC
  workflow_dispatch:

permissions:
  security-events: write
  issues: write

jobs:
  security-analysis:
    name: "SonarCloud, CodeQL, Trivy & Issue Creation"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      # ðŸ”¹ SonarCloud Scan
      - name: "Run SonarCloud Scan"
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=ShantanuShinde10_sonarscan
            -Dsonar.organization=shantanushinde10
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io

      # ðŸ”¹ CodeQL Analysis
      - name: "Initialize CodeQL"
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,python

      - name: "Run CodeQL Analysis"
        uses: github/codeql-action/analyze@v3

      # ðŸ”¹ Trivy Security Scan
      - name: "Run Trivy Vulnerability Scan"
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          format: "json"
          output: "trivy-results.json"
          exit-code: 0
          ignore-unfixed: true
          severity: "HIGH,CRITICAL"

      # ðŸ”¹ Create GitHub Issues for SonarCloud Alerts
      - name: "Create GitHub Issues for SonarCloud Alerts"
        if: success()
        run: |
          ALERTS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/issues/search?componentKeys=ShantanuShinde10_sonarscan&resolved=false")

          ALERT_COUNT=$(echo "$ALERTS" | jq '.total')

          if [ "$ALERT_COUNT" -gt 0 ]; then
            echo "SonarCloud alerts found. Creating issues..."
            echo "$ALERTS" | jq -c '.issues[]' | while read -r alert; do
              RULE_NAME=$(echo "$alert" | jq -r '.rule')
              ISSUE_MESSAGE=$(echo "$alert" | jq -r '.message')
              ALERT_URL="https://sonarcloud.io/project/issues?id=ShantanuShinde10_sonarscan&open=$(echo "$alert" | jq -r '.key')"

              ISSUE_TITLE="Fix SonarCloud Alert - $RULE_NAME"
              ISSUE_BODY="### Security Alert ðŸš¨\n- **Rule**: $RULE_NAME\n- **Issue**: $ISSUE_MESSAGE\n- **View Alert**: [Click here]($ALERT_URL)"

              curl -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
                -d "{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_BODY\", \"labels\":[\"security\"]}" \
                "https://api.github.com/repos/${{ github.repository }}/issues"
            done
          else
            echo "No security issues found in SonarCloud."
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      # ðŸ”¹ Create GitHub Issues for CodeQL Alerts
      - name: "Create GitHub Issues for CodeQL Alerts"
        if: success()
        run: |
          ALERTS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts?state=open")

          ALERT_COUNT=$(echo "$ALERTS" | jq 'length')

          if [ "$ALERT_COUNT" -gt 0 ]; then
            echo "CodeQL alerts found. Creating issues..."
            echo "$ALERTS" | jq -c '.[]' | while read -r alert; do
              RULE_NAME=$(echo "$alert" | jq -r '.rule.name')
              ALERT_URL=$(echo "$alert" | jq -r '.html_url')

              ISSUE_TITLE="Fix CodeQL Alert - $RULE_NAME"
              ISSUE_BODY="### Security Alert ðŸš¨\n- **Rule**: $RULE_NAME\n- **View Alert**: [Click here]($ALERT_URL)"

              curl -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
                -d "{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_BODY\", \"labels\":[\"security\"]}" \
                "https://api.github.com/repos/${{ github.repository }}/issues"
            done
          else
            echo "No security issues found in CodeQL."
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      # ðŸ”¹ Create GitHub Issues for Trivy Vulnerabilities
      - name: "Create GitHub Issues for Trivy Vulnerabilities"
        if: success()
        run: |
          if [ -f "trivy-results.json" ]; then
            ALERTS=$(jq -c '.Results[]? | select(.Vulnerabilities != null) | .Vulnerabilities[]' trivy-results.json)

            if [ -n "$ALERTS" ]; then
              echo "Trivy vulnerabilities found. Creating issues..."
              echo "$ALERTS" | while read -r alert; do
                VULN_ID=$(echo "$alert" | jq -r '.VulnerabilityID')
                SEVERITY=$(echo "$alert" | jq -r '.Severity')
                PACKAGE_NAME=$(echo "$alert" | jq -r '.PkgName')
                INSTALLED_VERSION=$(echo "$alert" | jq -r '.InstalledVersion')
                FIXED_VERSION=$(echo "$alert" | jq -r '.FixedVersion // "N/A"')

                ISSUE_TITLE="Fix Trivy Alert - $VULN_ID"
                ISSUE_BODY="### Security Alert ðŸš¨\n- **Vulnerability**: $VULN_ID\n- **Severity**: $SEVERITY\n- **Package**: $PACKAGE_NAME\n- **Installed Version**: $INSTALLED_VERSION\n- **Fixed Version**: $FIXED_VERSION"

                curl -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
                  -d "{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_BODY\", \"labels\":[\"security\"]}" \
                  "https://api.github.com/repos/${{ github.repository }}/issues"
              done
            else
              echo "No vulnerabilities found in Trivy scan."
            fi
          else
            echo "Trivy results file not found."
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
